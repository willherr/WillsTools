@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<NavMenu />

<div class="main bg-light">
    <div class="card rounded-0">
        <div class="card-header bg-white @PageNavbarClass">

            <div class="d-inline-block">
                <h6 class="card-title mb-0 font-weight-bold d-inline-block d-md-none @(string.IsNullOrEmpty(Title) ? "d-none" : "")">
                    @Title
                </h6>
                <h6 class="d-inline-block mb-0 @(string.IsNullOrEmpty(SubTitle) ? "d-none" : "")">
                    <span class="d-inline-block d-md-none">-</span>
                    @SubTitle
                </h6>
            </div>

            <div class="dropdown btn-group float-right @(pageActions.Any() ? "" : "d-none")">
                <button id="PageActions" type="button" class="btn btn-secondary rounded py-0 px-1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data->
                    <span class="fas fa-cog"></span>
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                    @foreach (var pageAction in pageActions)
                    {
                        <button class="dropdown-item" @onclick="() => pageAction.Action()">@pageAction.Name</button>
                    }
                </div>
            </div>
        </div>

        <div class="card-body px-0 px-sm-2">
            <CascadingValue Value="this">
                @Body
            </CascadingValue>
        </div>
    </div>
</div>

@code{
    private string PageNavbarClass
    {
        get
        {
            if (PageActions.Any())
            {
                return string.Empty;
            }
            else if (!string.IsNullOrEmpty(Title))
            {
                return "d-md-none";
            }

            return "d-none";
        }
    }

    private string title;
    public string Title
    {
        get => title;
        set
        {
            title = value;
            StateHasChanged();
        }
    }

    private string subTitle;
    public string SubTitle
    {
        get => subTitle;
        set
        {
            subTitle = value;
            StateHasChanged();
        }
    }

    private List<(string Name, Action Action)> pageActions = new List<(string Name, Action Action)>();
    public List<(string Name, Action Action)> PageActions
    {
        get => pageActions;
        set
        {
            pageActions = value;
            StateHasChanged();
        }
    }

    public void Reset()
    {
        subTitle = null;
        title = null;
        pageActions = new List<(string Name, Action Action)>();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("MainLayout.initialize");
        }
        if (Title != "Bottom's Up")
        {
            await JSRuntime.InvokeVoidAsync("Utility.removeClass", "app", "flex-column-reverse");
        }
    }
}