@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements ILayout  

<Title>@(string.IsNullOrEmpty(Title) ? null : $"{Title} | ")Will's Tools</Title>

<CascadingValue Name="MainLayout" Value="this">
    <MatAppBarContainer Class="h-100">
        <MatAppBar Class="mat-elevation-z4" Fixed="true">
            <MatAppBarRow>
                <MatAppBarSection>
                    <MatIconButton Class="d-flex" Icon="menu" OnClick="ClickSidebarButton"></MatIconButton>
                    <MatAppBarTitle>
                        <i class="fas fa-tools fa-lg mr-1"></i>
                        @if (string.IsNullOrEmpty(Title))
                        {
                            <text>Will's Tools</text>
                        }
                        else
                        {
                            <MatHidden Breakpoint="MatBreakpoint.MD" Direction="MatHiddenDirection.Up">
                                <ChildContent>
                                    @Title
                                </ChildContent>
                                <ElseContent>
                                    Will's Tools
                                </ElseContent>
                            </MatHidden>
                        }
                    </MatAppBarTitle>
                </MatAppBarSection>
                <MatAppBarSection Align="MatAppBarSectionAlign.End">
                    <MatTooltip Tooltip="Will's source code." Wrap="true" Position="MatTooltipPosition.Left">
                        <MatIconButton Class="d-flex" Link="https://github.com/willherr/WillsTools" Target="_blank">
                            <i class="fab fa-github" aria-hidden="true"></i>
                        </MatIconButton>
                    </MatTooltip>
                </MatAppBarSection>
            </MatAppBarRow>
        </MatAppBar>

        <MatAppBarContent>
            <MatDrawerContainer Class="h-100">
                <MatHidden Breakpoint="@MatBreakpoint.MD" Direction="@MatHiddenDirection.Up">
                    <ChildContent>
                        <MatDrawer @bind-Opened="@OpenedDrawer" Mode="@MatDrawerMode.Modal">
                            <NavMenu />
                        </MatDrawer>
                    </ChildContent>

                    <ElseContent>
                        <MatDrawer Class="mat-elevation-z4" Opened="@OpenedLargeDrawer">
                            <NavMenu />
                        </MatDrawer>
                    </ElseContent>
                </MatHidden>

                <MatDrawerContent>
                    @Body
                </MatDrawerContent>
            </MatDrawerContainer>
        </MatAppBarContent>
    </MatAppBarContainer>
</CascadingValue>

@code{
    private bool openedDrawer = false;
    public bool OpenedDrawer
    {
        get => openedDrawer;
        set
        {
            openedDrawer = value;
            StateHasChanged();
        }
    }

    private bool openedLargeDrawer = true;
    public bool OpenedLargeDrawer
    {
        get => openedLargeDrawer;
        set
        {
            openedLargeDrawer = value;
            StateHasChanged();
        }
    }

    private string title;
    public string Title
    {
        get => title;
        set
        {
            title = value;
            StateHasChanged();
        }
    }

    public void Reset()
    {
        openedDrawer = false;
        title = null;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("MainLayout.initialize");
        }
        if (Title != "Bottom's Up")
        {
            await JSRuntime.InvokeVoidAsync("Utility.removeClass", "app", "flex-column-reverse");
        }
    }

    private void ClickSidebarButton()
    {
        OpenedLargeDrawer = !OpenedLargeDrawer;
        OpenedDrawer = !OpenedDrawer;
    }
}
