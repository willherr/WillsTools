@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<Title>@(string.IsNullOrEmpty(Title) ? null : $"{Title} | ")Will's Tools</Title>

<MatAppBarContainer Class="h-100">
    <MatAppBar Fixed="true">
        <MatAppBarRow>
            <MatAppBarSection>
                <MatIconButton Icon="menu" OnClick="() => opened = !opened"></MatIconButton>
                <MatAppBarTitle>Will's Tools @(string.IsNullOrEmpty(Title) ? null : $"- {Title}")</MatAppBarTitle>
            </MatAppBarSection>
            <MatAppBarSection Align="@MatAppBarSectionAlign.End">
                <MatIconButton Icon="favorite"></MatIconButton>
            </MatAppBarSection>
        </MatAppBarRow>
    </MatAppBar>

    <MatAppBarContent>
        <MatDrawerContainer Class="h-100">
            <MatHidden Breakpoint="@MatBreakpoint.MD" Direction="@MatHiddenDirection.Up">
                <ChildContent>
                    <MatDrawer @bind-Opened="@opened" Mode="@MatDrawerMode.Modal">
                        <NavMenu />
                    </MatDrawer>
                </ChildContent>

                <ElseContent>
                    <MatDrawer Class="mat-elevation-z4" @bind-Opened="@opened" Mode="@MatDrawerMode.Dismissible">
                        <NavMenu />
                    </MatDrawer>
                </ElseContent>
            </MatHidden>

            <MatDrawerContent>
                <CascadingValue Value="this">
                    @Body
                </CascadingValue>
            </MatDrawerContent>
        </MatDrawerContainer>
    </MatAppBarContent>
</MatAppBarContainer>

@code{
    private bool opened = true;

    private string title;
    public string Title
    {
        get => title;
        set
        {
            title = value;
            StateHasChanged();
        }
    }

    private string subTitle;
    public string SubTitle
    {
        get => subTitle;
        set
        {
            subTitle = value;
            StateHasChanged();
        }
    }

    private List<(string Name, Action Action)> pageActions = new List<(string Name, Action Action)>();
    public List<(string Name, Action Action)> PageActions
    {
        get => pageActions;
        set
        {
            pageActions = value;
            StateHasChanged();
        }
    }

    public void Reset()
    {
        subTitle = null;
        title = null;
        pageActions = new List<(string Name, Action Action)>();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("MainLayout.initialize");
        }
        if (Title != "Bottom's Up")
        {
            await JSRuntime.InvokeVoidAsync("Utility.removeClass", "app", "flex-column-reverse");
        }
    }
}