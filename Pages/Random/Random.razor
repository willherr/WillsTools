@page "/random"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject ISyncLocalStorageService localStorage // also have option for an async provider (omit Sync from interface name)

    <EditForm Model="ViewModel" OnValidSubmit="ViewModel.AddInputToList" class="mb-4 row no-gutters align-items-center">
        @switch (ViewModel.InputType)
        {
            case InputType.Scramble:
            case InputType.OneAtATime:
                <InputText class="col col-lg-6 mr-2 pl-1" placeholder="Enter a random item" @bind-Value="ViewModel.Input"></InputText>
                break;

            case InputType.Range:
                <InputText class="col col-lg-3 mr-2 pl-1" placeholder="Start" @bind-Value="ViewModel.InputRangeStart"></InputText>
                <span>-</span>
                <InputText class="col col-lg-3 mx-2 pl-1" placeholder="End" @bind-Value="ViewModel.InputRangeEnd"></InputText>
                break;
        }

        @if (InputType.Word == ViewModel.InputType)
        {
            <button class="btn btn-primary col col-lg-6" @onclick="RandomWord">Random Word!</button>
        }
        else
        {
            <button class="btn btn-success px-1 py-0"><i class="fas fa-plus font-size-large"></i></button>
        }
    </EditForm>

    @if (ViewModel.Items.Any() && new[] { InputType.OneAtATime, InputType.Range }.Contains(ViewModel.InputType))
    {
        <div class="col-lg-6">
            <ol class="mb-4 list-unstyled ml-4 overflow-auto" style="max-height: 225px">
                @foreach (var item in ViewModel.Items)
                {
                    <li>
                        <i class="fas fa-times btn p-0 text-danger mr-2" @onclick="_ => ViewModel.Items.Remove(item)"></i>
                        @if (item.Popped)
                        {
                            <del class="text-secondary">@item.Name</del>
                        }
                        else
                        {
                            <span>@item.Name</span>
                        }
                    </li>
                }
            </ol>
        </div>
    }

    @if (new[] { InputType.OneAtATime, InputType.Range }.Contains(ViewModel.InputType))
    {
        <div class="row no-gutters col col-lg-6 justify-content-between p-0">
            <div class="row no-gutters">
                <button @onclick="_ => ViewModel.Randomize()" class="mb-4 mr-2 btn btn-primary">Randomize!</button>
                <button @onclick="_ => ViewModel.Get()" class="mb-4 mr-2 btn btn-primary">Get!</button>
                <button @onclick="_ => ViewModel.Pop()" class="mb-4 mr-2 btn btn-primary">Pop!</button>
            </div>
            <div class="row no-gutters">
                <button @onclick="_ => ViewModel.Reset(false)" class="mb-4 mr-2 btn btn-warning">Reset</button>
                <button @onclick="_ => ViewModel.Reset()" class="mb-4 btn btn-danger">Clear</button>
            </div>
        </div>
    }

    <div class="row no-gutters" @onclick="e => CopyResult()" style="cursor:pointer">
        <div class="h-100 font-weight-bold rounded border p-1 border-primary col-lg-6 col">@(ViewModel.RandomItem ?? "...")</div>
    </div>

    <div class="row no-gutters text-muted mt-2">
        @message
    </div>

@code {
    private string message;

    public RandomViewModel ViewModel { get; set; }
    [CascadingParameter] MainLayout Layout { get; set; }

    private Task RandomWord()
    {
        var source = new System.Threading.CancellationTokenSource();
        ViewModel.RandomItem = ".";

        Task.Run(() =>
        {
            while (true)
            {
                ViewModel.RandomItem += ".";
                StateHasChanged();
                Task.Delay(100).Wait();
            }
        }, source.Token);

        return GetRandomWord().ContinueWith(word =>
        {
            source.Cancel();
            ViewModel.RandomItem = word.Result;
            StateHasChanged();
        });
    }

    private async Task CopyResult()
    {
        await JSRuntime.InvokeVoidAsync("Utility.copyText", ViewModel.RandomItem);
        message = "Copied to clipboard.";
        _ = Task.Delay(5000).ContinueWith(_ => message = null).ContinueWith(_ => StateHasChanged());
    }

    protected override void OnInitialized()
    {
        if (localStorage.ContainKey(nameof(ViewModel)))
        {
            ViewModel = localStorage.GetItem<RandomViewModel>(nameof(ViewModel));
        }
        else
        {
            ViewModel = new RandomViewModel
            {
                Items = new List<RandomItem>
                {
                    new RandomItem("Stars"),
                    new RandomItem("Diamonds"),
                    new RandomItem("Hearts"),
                    new RandomItem("Clubs"),
                    new RandomItem("Spades"),
                }
            };
        }

        GetRandomWord().ContinueWith(word =>
        {
            ViewModel.RandomItem = word.Result;
            StateHasChanged();
        });

        base.OnInitialized();
        Layout.Reset();
        Layout.Title = "Random";
        Layout.PageActions = new List<(string Name, Action Action)>
        {
            ("One-at-a-time", InitOneAtATime),
            ("Range", InitRange),
            ("Scramble", InitScramble),
            ("Word", InitWord)
        };

        Layout.PageActions[(int)ViewModel.InputType].Action();

        void InitOneAtATime()
        {
            Layout.SubTitle = "One-at-a-time";
            ViewModel.InputType = InputType.OneAtATime;
        }

        void InitRange()
        {
            Layout.SubTitle = "Range";
            ViewModel.InputType = InputType.Range;
        }

        void InitScramble()
        {
            Layout.SubTitle = "Scramble";
            ViewModel.InputType = InputType.Scramble;
        }

        void InitWord()
        {
            Layout.SubTitle = "Word";
            ViewModel.InputType = InputType.Word;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (!firstRender)
        {
            localStorage.SetItem(nameof(ViewModel), ViewModel);
            Debug.WriteLine(ViewModel.InputType);
        }
    }

    private Task<string> GetRandomWord()
    {
        return Http.GetFromJsonAsync<string[]>("https://random-word-api.herokuapp.com/word")
            .ContinueWith(json => json.Result[0]);
    }
}
