@page "/random"
@inject HttpClient Http
@inject ISyncLocalStorageService localStorage // also have option for an async provider (omit Sync from interface name)

<div class="mx-2">
    <EditForm Model="RandomListModel" OnValidSubmit="RandomListModel.AddInputToList" class="mb-4 row no-gutters align-items-center">
        <InputText class="mr-2" placeholder="Enter a random item" @bind-Value="RandomListModel.Input"></InputText>
        <button class="btn btn-success px-1 py-0"><i class="fas fa-plus font-size-large"></i></button>
    </EditForm>

    @if (RandomListModel.Items.Any())
    {
        <ol class="mb-4">
            @foreach (var item in RandomListModel.Items)
            {
                <li>
                    @if (item.Popped)
                    {
                        <del class="mr-2">@item.Name</del>
                    }
                    else
                    {
                        <span class="mr-2">@item.Name</span>
                    }
                    <i class="fas fa-times btn p-0 text-danger" @onclick="_ => RandomListModel.Items.Remove(item)"></i>
                </li>
            }
        </ol>
    }

    <div class="row no-gutters">
        <button @onclick="_ => RandomListModel.Randomize()" class="mb-4 mr-2 btn btn-primary">Randomize!</button>
        <button @onclick="_ => RandomListModel.Get()" class="mb-4 mr-2 btn btn-primary">Get!</button>
        <button @onclick="_ => RandomListModel.Pop()" class="mb-4 mr-2 btn btn-primary">Pop!</button>
        <button @onclick="_ => RandomListModel.Reset(false)" class="mb-4 mr-2 btn btn-warning">Reset</button>
        <button @onclick="_ => RandomListModel.Reset()" class="mb-4 btn btn-danger">Clear</button>
    </div>

    <div class="h-100 font-weight-bold rounded border p-1 border-primary">@(RandomListModel.RandomItem ?? "...")</div>
</div>

@code {
    public RandomListModel RandomListModel { get; set; }
    [CascadingParameter] MainLayout Layout { get; set; }

    private void InitRandomizeAList()
    {
        Layout.SubTitle = "List";
    }

    protected override void OnInitialized()
    {
        if (localStorage.ContainKey(nameof(RandomListModel)))
        {
            RandomListModel = localStorage.GetItem<RandomListModel>(nameof(RandomListModel));
        }
        else
        {
            RandomListModel = new RandomListModel
            {
                Items = new List<RandomItem>
                {
                    new RandomItem("Stars"),
                    new RandomItem("Diamonds"),
                    new RandomItem("Hearts"),
                    new RandomItem("Clubs"),
                    new RandomItem("Spades"),
                }
            };
        }

        base.OnInitialized();
        Layout.Reset();
        Layout.Title = "Random";
        Layout.PageActions = new List<(string Name, Action Action)>
        {
            ("Randomize a list", InitRandomizeAList)
        };

        Layout.PageActions[0].Action();
        GetRandomWord().ContinueWith(word =>
        {
            RandomListModel.RandomItem = word.Result;
            StateHasChanged();
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (!firstRender)
        {
            localStorage.SetItem(nameof(RandomListModel), RandomListModel);
        }
    }

    private async Task<string>
    GetRandomWord()
    {
        return (await Http.GetFromJsonAsync<string[]>
            ("https://random-word-api.herokuapp.com/word"))[0];
    }
}
