@page "/bottoms-up"
@inject IJSRuntime JSRuntime

@if (!initializing)
{
    <div class="row no-gutters justify-content-center">
        <div class="row no-gutters flex-column-reverse mx-2 text-right w-md-75">
            @foreach (var line in Content)
            {
                <p>@line</p>
            }
            <br />
            <hr class="w-100" />
            <br />
            <label>@BottomsUpLine("Enter text to \"Bottom's Up\"")</label>
            <input type="text" size="1" class="w-100" @oninput="BottomsUpTool" />
            <p>@BottomsUpOutput</p>
        </div>
    </div>
}

@code {
    private static Dictionary<char, char> flippedPunctuation = new Dictionary<char, char>
{
        { '(', ')' },
        { ')', '(' },
        { '[', ']' },
        { ']', '[' },
        { '{', '}' },
        { '}', '{' },
        { '<', '>' },
        { '>', '<' }
    };

    private bool initializing = false;
    private string[] Content = new string[]
    {
        "Typically, you read top to bottom, left to right. In some cultures, you read top to bottom, right to left. In Will's culture, you read bottom to top, right to left. Otherwise known as, \"Bottom's Up\".",
        "This is what Bottom's Up demonstrates. Just because we are used to something a certain way, doesn't mean that there can't be other completely valid ways to do something.",
        "Also, I'm basically just coming up with stuff to say just to add content to this page because without the content, this page is totally confusing. So thank goodness for this content!",
        "I can't believe you are still reading this at this point... But props to you for getting this far. I'm not even sure how I got this far..."
            };

    private string BottomsUpOutput { get; set; }

    private void BottomsUpTool(ChangeEventArgs e)
    {
        BottomsUpOutput = BottomsUpLine(e?.Value.ToString());
        StateHasChanged();
    }

    private string BottomsUpLine(string line)
    {
        if (line == null)
        {
            return null;
        }

        var splitLine = line.Split(' ');
        for (var j = 0; j < splitLine.Length; j++)
        {
            splitLine[j] = BottomsUpWord(splitLine[j]);
        }
        return string.Join(' ', splitLine.Reverse());
    }

    private string BottomsUpWord(string word)
    {
        if (word.Length > 0)
        {
            if (word.All(c => !char.IsLetterOrDigit(c)))
            {
                word = string.Join(string.Empty, word.Reverse());
            }
            else
            {
                var newFront = GetPunctuations(word, false);
                var newEnd = GetPunctuations(word, true);

                var front = string.Join(string.Empty, newFront);
                var end = string.Join(string.Empty, newEnd);
                var middle = word.Substring(end.Length, word.Length - front.Length - end.Length);

                if (middle.Contains('-'))
                {
                    middle = string.Join('-', word.Split('-').Reverse());
                }

                word = $"{front}{middle}{end}";
            }
        }
        return FlipPunctuations(word);
    }

    private List<char> GetPunctuations(string word, bool fromFront)
    {
        Func<string, char> nextChar;
        var startSubstring = fromFront ? 1 : 0;
        if (fromFront)
        {
            nextChar = str => str.First();
        }
        else
        {
            nextChar = str => str.Last();
        }

        var wordPunctuation = new List<char>();
        while (!char.IsLetterOrDigit(nextChar(word)))
        {
            wordPunctuation.Add(nextChar(word));
            word = word.Substring(startSubstring, word.Length - 1);
        }

        return wordPunctuation;
    }

    private string FlipPunctuations(string word)
    {
        return string.Join(string.Empty, word.Select(c => flippedPunctuation.TryGetValue(c, out var value) ? value : c));
    }

    #region Initialization
    private List<CounterWidgetModel> counterWidgets = new List<CounterWidgetModel>();
    [CascadingParameter] MainLayout Layout { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Layout.Reset();
        Layout.Title = "Bottom's Up";

        for (var i = 0; i < Content.Length; i++)
        {
            Content[i] = BottomsUpLine(Content[i]);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("Utility.addClass", "app", "flex-column-reverse");
            await JSRuntime.InvokeVoidAsync("Utility.scrollToBottom");
        }
    }
    #endregion
}
